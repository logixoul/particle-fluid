vec3 complexToColor(vec2 comp) {
	float hue = (float)M_PI+(float)atan2(comp.y,comp.x);
	hue /= (float)(2*M_PI);
	float lightness = length(comp);
	//lightness = .5f;
	//lightness /= lightness + 1.0f;
	//HslF hsl(hue, 1.0f, lightness);
 	//return FromHSL(hsl);
	vec3 colors[] = {
		//vec3(0,0,0),
		vec3(15,131,174),
		vec3(246,24,199),
		vec3(148,255,171),
		vec3(251,253,84)
	};
	int colorCount = 4;
	float pos = hue*(colorCount - .01f);
	int posint1 = floor(pos);
	int posint2 = (posint1 + 1) % colorCount;
	float posFract = pos - posint1;
	vec3 color1 = colors[posint1];
	vec3 color2 = colors[posint2];
	return lerp(color1, color2, posFract) / 255.0f;
}

#if 0
	void renderComplexImg(Array2D<Complexf> in) {
		Array2D<vec3> colored(in.Size());
		forxy(in) {
			vec2 vec2(in(p).real(), in(p).imag());
			colored(p) = complexToColor_HSV(vec2)/* * 10000.0f*/;
		}
		::texToDraw = gtex(colored);
		::texOverride = true;
	}
	void printMinMax(string desc, Array2D<Complexf> in) {
		auto lengths = Array2D<float>(in.Size());
		forxy(in) {
			lengths(p) = abs(in(p));
		}
		printMinMax(desc, lengths);
	}
	void printMinMax(string desc, Array2D<float> arr) {
		auto maxEl = *std::max_element(arr.begin(), arr.end());
		auto minEl = *std::min_element(arr.begin(), arr.end());
		qDebug() << "array '" << desc << "': min=" << minEl << ", max=" << maxEl;
	}
	Array2D<Complexf> getFdKernel(ivec2 size) {
		Array2D<float> sdKernel(size);
		forxy(sdKernel) {
			auto p2=p;if(p2.x>sdKernel.w/2)p2.x-=sdKernel.w;if(p2.y>sdKernel.h/2)p2.y-=sdKernel.h;
			//sdKernel(p) = 1.0 / (.01f + (p2-ivec2(3, 3)).length()/10.0f);
			//sdKernel(p) = 1.0 / (1.f + p2.length()/10.0f);
			float dist = p2.length();
			//sdKernel(p) = powf(max(1.0f - p2.length() / 20.0f, 0.0f), 4.0);
			//sdKernel(p) = 1.0 / pow((1.f + dist*5.0f), 3.0f);
			sdKernel(p) = p2.length() > 10 ? 0 : 1;
			//sdKernel(p) = expf(-p2.lengthSquared()*.02f);
			//if(p == ivec2::zero()) sdKernel(p) = 1.0f;
			//else sdKernel(p) = 0.0f;
		}
		auto kernelInvSum = 1.0/(std::accumulate(sdKernel.begin(), sdKernel.end(), 0.0f));
		forxy(sdKernel) { sdKernel(p) *= kernelInvSum; }
		auto fdKernel = fft(sdKernel, FFTW_MEASURE);
		return fdKernel;
	}
	Array2D<vec3> convolveLongtail(Array2D<vec3> in) {
		/*static*/ Array2D<Complexf> fdKernel = getFdKernel(in.Size());
		auto inChans = ::split(in);
		for(int i = 0; i < inChans.size(); i++) {
			auto& inChan = inChans[i];
			auto inChanFd = fft(inChan, FFTW_MEASURE);
			//renderComplexImg(inChanFd);
			forxy(inChanFd) {
				auto p2=p;if(p2.x>in.w/2)p2.x-=in.w;if(p2.y>in.h/2)p2.y-=in.h;
				inChanFd(p) *= fdKernel(p);
				//if(p != vec2::zero())
				//	inChanFd(p) /= 10.0f + sqrt(p2.length());
				//inChanFd(p) *= .1f;
				//inChanFd(p) *= expf(-.01*p2.lengthSquared());
				//if(p2.length() > 10)
				//	inChanFd(p) *= 0.0f;
			}
			//renderComplexImg(fdKernel);
			inChan = ifft(inChanFd, FFTW_MEASURE);
		}
		return ::merge(inChans);
	}
	void renderIt() {
		static Array2D<float> sizeSource(sx, sy);
		static auto sizeSourceTex = gtex(sizeSource);
		static auto walkerTex = Shade().tex(sizeSourceTex).expr("vec3(0.0);").run();
		if(!pause) {
			walkerTex = Shade().tex(walkerTex).expr("fetch3()*.99;").run();
			glPushAttrib(GL_ALL_ATTRIB_BITS);
			glUseProgram(0);
			glPointSize(2);
			glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
			glEnable(GL_BLEND);
			{
				beginRTT(walkerTex);
				{
					gl::pushMatrices();
					gl::setMatricesWindow(sx, sy, true);
					{
						glBegin(GL_POINTS);
						{
							foreach(Walker& walker, walkers) {
								auto& c = walker.color;
								glColor4f(c.x, c.y, c.z, walker.alpha());
								glVertex2f(walker.pos);
							}
						}
						glEnd();
					}
					gl::popMatrices();
				}
				endRTT();
			}
			glPopAttrib();
		}

		auto walkerImg = gettexdata<vec3>(walkerTex, GL_RGB, GL_FLOAT, walkerTex.getCleanBounds());
		walkerImg = convolveLongtail(walkerImg);
		auto walkerTex2 = gtex(walkerImg);

		//walkerTex = gpuBlur2_4::run_longtail(walkerTex, 3, 1.0);
		auto walkerTex3 = shade2(walkerTex, walkerTex2, "_out.rgb = tc.x > .5 ? fetch3() : fetch3(tex2) * 600.0;");

		if(::texOverride) {
			gl::draw(texToDraw, getWindowBounds());
		} else {
			gl::draw(walkerTex3, getWindowBounds());
		}
	}
#else

////////////////

	template<class T>
	static Array2D<T> gauss3_weightAdjusting(Array2D<T> src) {
		T zero = ::zero<T>();
		Array2D<T> dst1(src.w, src.h);
		Array2D<T> dst2(src.w, src.h);
		forxy(dst1) {
			dst1(p) = .25f * (2.0f * get_clamped(src, p.x, p.y) + get_clamped(src, p.x - 1, p.y) + get_clamped(src, p.x + 1, p.y));
		}
		forxy(dst2) {
			vector<float> weights = { .25, .5, .25 };
			if (p.y == 0) weights[0] = 0.0f;
			if (p.y == src.h - 1) weights[2] = 0.0f;
			float sumW = ::accumulate(weights.begin(), weights.end(), 0.0f);
			for (auto& weight : weights) weight /= sumW;
			dst2(p) = weights[1] * get_clamped(dst1, p.x, p.y) + weights[0] * get_clamped(dst1, p.x, p.y - 1) + weights[2] * get_clamped(dst1, p.x, p.y + 1);
		}
		return dst2;
	}

//////////////


	void repel(Material& a, Material& b) {
		throw 0;
		auto offsets = empty_like(a.tmpEnergy);

		auto guidance = gaussianBlur<float, WrapModes::GetClamped>(b.img, 4 * 2 + 1);
		forxy(a.img) {
			auto g = gradient_i<float, WrapModes::GetClamped>(guidance, p);
			g = -safeNormalized(g) * .2f;

			a.tmpEnergy(p) += g * a.img(p);
			//offsets(p) = g * a.img(p);
		}
		//advect(a, offsets);
	}

============

void doFluidStep() {
		red.ComputeDensityPressure();
		red.ComputeForces();
		red.Integrate();
		return;
		/*
		surfTensionThres = cfg1::cfg2("surfTensionThres", .04f,
			[&]() { return keys['6']; },
			[&]() { return expRange(mouseY, 0.1f, 50000.0f); });

		auto surfTension = cfg1::cfg2("surfTension", 1.0f,
			[&]() { return keys['7']; },
			[&]() { return expRange(mouseY, .0001f, 40000.0f); });
		auto gravity = cfg1::cfg2("gravity", .1f,//0.0f,//.1f,
			[&]() { return keys['8']; },
			[&]() { return expRange(mouseY, .0001f, 40000.0f); });
		auto incompressibilityCoef = cfg1::cfg2("incompressibilityCoef", 10.0f,
			[&]() { return keys['/']; },
			[&]() { return expRange(mouseY, .0001f, 40000.0f); });


		//for (int i = 0; i < 4; i++) {
			//repel(::red, ::green);
			//repel(::green, ::red);
		//}

		auto imgForAdvect = Array2D<float>(sz);
		for (auto* mat : materials) {
			for (auto& particle : mat->particles) {
				aaPoint<float, WrapModes::GetClamped>(imgForAdvect, particle.pos, 1);
			}
		}
		for (int i = 0; i < 10; i++) {
			imgForAdvect = ::gaussianBlur<float, WrapModes::GetClamped>(imgForAdvect, 3 * 2 + 1);
		}
		//auto grads = get_gradients(imgForAdvect);

		for (auto material : ::materials) {
			auto& particles = material->particles;
			auto img_b = imgForAdvect;
			//for(int i < 0
			//img_b = gaussianBlur<float, WrapModes::GetClamped>(imgForAdvect, 3 * 2 + 1);
			auto& guidance = img_b;
			for (auto& particle : material->particles) {
				particle.velocity += vec2(0.0f, gravity);

				auto g = gradient_i<float, WrapModes::Get_WrapZeros>(guidance, particle.pos);
				if (img_b(particle.pos) < surfTensionThres)
				{
					g = g * surfTension * imgForAdvect(particle.pos);
				}
				else
				{
					g *= -incompressibilityCoef;
				}

				particle.velocity += g;
			}

			advect(*material);
		}


	}
	void advect(Material& material) {
		for (auto& particle : material.particles) {
			vec2 newPos = particle.pos + particle.velocity;
			for (int dim = 0; dim <= 1; dim++) {
				const float damping = 0.9f;
				float maxVal = sz[dim] - 1;
				if (newPos[dim] > maxVal) {
					particle.velocity[dim] *= -1.0f * damping;
					newPos[dim] = maxVal - (newPos[dim] - maxVal);
				}
				if (newPos[dim] < 0) {
					particle.velocity[dim] *= -1.0f * damping;
					newPos[dim] = -newPos[dim];
				}
			}
			particle.pos = newPos;
		}
	}
};